@page "/vocab"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using EnglishLearningBlazorApp.Client
@using System.Reflection;
@using WeCantSpell
@using WeCantSpell.Hunspell;
@inject HttpClient Http
@inject IJSRuntime JSRuntime





<PageTitle>Vocab</PageTitle>

<h1>Vocab</h1>

<div class="mb-3">
    <input type="text" class="form-control" @bind="newWord" placeholder="Enter a new vocab word">
    <button class="btn btn-primary" @onclick="CreateNewWord">Add Word</button>
</div>

@if (suggestions.Count > 0)
{
    <div class="suggestions">
        <p>Suggestions:</p>
        @foreach (var suggestion in suggestions)
        {
            <p>@suggestion</p>
        }
    </div>
}

@if (words == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th>Word</th>
                <th>Definition</th>
                <th>Example</th>
                <th></th> <!-- Add an empty header for the delete button column -->
            </tr>
        </thead>
        <tbody>
            @foreach (var item in words)
            {
                <tr>
                    <td>@item.simpleTense</td>
                    <td>@item.definition</td>
                    <td>@example</td>
                    <td>
                        <audio id="sound" src="@($"https://dictionary.cambridge.org/{@item.UKAudioURI}")" />
                        <button onclick="document.getElementById('sound').play()">Play through Javascript</button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteWord(item.wordId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {

    private List<string> suggestions = new List<string>();

    private EnglishLearningBlazorApp.Shared.Word[]? words;

    private string example = "";

    private string newWord = "";

    private static string affContent;

    private static string dicContent;

    private WordList? dictionary;

   
    // WordList dictionary = WordList.CreateFromFiles(affContent, dicContent);


    private Stream GetEmbeddedResourceStream(string resourceName)
    {
        var assembly = Assembly.GetExecutingAssembly();
        return assembly.GetManifestResourceStream(resourceName);
    }

    protected override async Task OnInitializedAsync()
    {

        try
        {
            words = await Http.GetFromJsonAsync<EnglishLearningBlazorApp.Shared.Word[]>("Words");

            using (var dictionaryStream = GetEmbeddedResourceStream("EnglishLearningBlazorApp.Client.wwwroot.en_GB.dic"))
            using (var affixStream = GetEmbeddedResourceStream("EnglishLearningBlazorApp.Client.wwwroot.en_GB.aff"))
            {
                dictionary = WordList.CreateFromStreams(dictionaryStream, affixStream);
            }
            // await GetExample();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            // Log the exception to the console or any logging service.
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
        }
    }



    protected async Task GetExample()
    {
        HttpContent content = new StringContent("");

        var response = await Http.PostAsync("ChatGPT/{lose}", content);
        example = await response.Content.ReadAsStringAsync();
    }

    protected async Task CreateNewWord()
    {
        if (dictionary.Check(newWord))
        {
        var response = await Http.PostAsync($"Words/{newWord}", null);
        response.EnsureSuccessStatusCode();
        words = await Http.GetFromJsonAsync<EnglishLearningBlazorApp.Shared.Word[]>("Words");
        }
    }

    protected async Task DeleteWord(int id)
    {
        var response = await Http.DeleteAsync($"Words/{id}");
        words = await Http.GetFromJsonAsync<EnglishLearningBlazorApp.Shared.Word[]>("Words");
    }



}
