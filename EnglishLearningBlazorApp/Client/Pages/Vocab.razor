@page "/vocab"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using EnglishLearningBlazorApp.Client
@using System.Reflection;
@using WeCantSpell
@using WeCantSpell.Hunspell;
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Vocab</PageTitle>

<h1>Vocab</h1>

@*<div class="mb-3">
    <input type="text" class="form-control" @bind="newWord" placeholder="Enter a new vocab word">
    <button class="btn btn-primary" @onclick="CreateNewWord">Add Word</button>
</div>*@


<div class="mb-3">
    <input type="text" class="form-control" @bind="newWord" placeholder="Enter a new vocab word" @oninput="HandleInput">
    <button class="btn btn-primary" @onclick="CreateNewWord">Add Word</button>
</div>

<!-- Suggestions Dropdown -->

@if (suggestions.Count > 0)
{
    <div class="suggestions">
        <p>Suggestions:</p>
        @foreach (var suggestion in suggestions)
        {
            <p>@suggestion</p>
        }
    </div>
}

@if (words == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th>Word</th>
                <th>Definition</th>
                <th>Example</th>
                <th></th> <!-- Add an empty header for the delete button column -->
            </tr>
        </thead>
        <tbody>
            @foreach (var item in words)
            {
                <tr>
                    <td>@item.simpleTense</td>
                    <td>@item.definition</td>
                    <td>@example</td>
                    <td>
                        <audio id="sound" src="@($"https://dictionary.cambridge.org/{@item.UKAudioURI}")" />
                        <button onclick="document.getElementById('sound').play()">Play through Javascript</button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteWord(item.wordId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private string userInput = "";

    private List<string> suggestions = new List<string>();

    private EnglishLearningBlazorApp.Shared.Word[]? words;

    private string example = "";

    private string newWord = "";


    private WordList? dictionary;

    private Timer debounceTimer;
    private const int DebounceDelay = 300; // Adjust the delay time as needed

    // WordList dictionary = WordList.CreateFromFiles(affContent, dicContent);




    protected override async Task OnInitializedAsync()
    {
        try
        {
            words = await Http.GetFromJsonAsync<EnglishLearningBlazorApp.Shared.Word[]>("Words");

            if (dictionary == null){
                using (var dictionaryStream = GetEmbeddedResourceStream("EnglishLearningBlazorApp.Client.wwwroot.en_GB.dic"))
                using (var affixStream = GetEmbeddedResourceStream("EnglishLearningBlazorApp.Client.wwwroot.en_GB.aff"))
                {
                    dictionary = WordList.CreateFromStreams(dictionaryStream, affixStream);
                }
            }
            // await GetExample();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            // Log the exception to the console or any logging service.
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
        }
    }


    private Stream GetEmbeddedResourceStream(string resourceName)
    {
        var assembly = Assembly.GetExecutingAssembly();
        return assembly.GetManifestResourceStream(resourceName);
    }


    #region Suggestion

    private async Task HandleInput(ChangeEventArgs e)
    {
        userInput = e.Value?.ToString() ?? "";

        // Call the suggests method with the user input, this will slow down the input box
        if (debounceTimer == null)
        {
            debounceTimer = new Timer(DebounceTimerCallback, null, DebounceDelay, Timeout.Infinite);
        }
        else
        {
            debounceTimer.Change(DebounceDelay, Timeout.Infinite);
        }
    }

    private void DebounceTimerCallback(object state)
    {
        // This method will be called when the timer elapses
        GenerateSuggestions();
        debounceTimer.Dispose();
        debounceTimer = null;
    }

    private async void GenerateSuggestions()
    {
        // This method generates suggestions based on the current user input.
        if (dictionary.Check(userInput))
        {
            suggestions.Clear();
            suggestions.Add(userInput);
            StateHasChanged();
        }
        else
        {
            suggestions = dictionary.Suggest(userInput).ToList();
            StateHasChanged(); // Notify Blazor to update the UI
        }
    }

    protected async Task suggests(string input)
    {

        suggestions = dictionary.Suggest(input).ToList();
    }

    #endregion


    protected async Task GetExample()
    {
        HttpContent content = new StringContent("");

        var response = await Http.PostAsync("ChatGPT/{lose}", content);
        example = await response.Content.ReadAsStringAsync();
    }

    protected async Task CreateNewWord()
    {
        if (dictionary.Check(newWord))
        {
            var response = await Http.PostAsync($"Words/{newWord}", null);
            response.EnsureSuccessStatusCode();
            words = await Http.GetFromJsonAsync<EnglishLearningBlazorApp.Shared.Word[]>("Words");
        }
    }

    protected async Task DeleteWord(int id)
    {
        var response = await Http.DeleteAsync($"Words/{id}");
        words = await Http.GetFromJsonAsync<EnglishLearningBlazorApp.Shared.Word[]>("Words");
    }



}
